using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using System.IO;

using DotNetMatrix;

namespace AHRSInterface
{
    public partial class calcVar : Form
    {
        delegate void displayLoggingPercentCallback(float percent_complete);
        
        public calcVar(AHRS sensor)
        {
            int i = 0;

            InitializeComponent();

            this.sensor = sensor;

            // Add DataReceived event handler.
            sensor.DataReceivedEvent += new DataReceivedDelegate(DataReceivedEventHandler);


            data_collection_enabled = false;
            next_data_index = 0;

            accxdata = new double[SAMPLES];
            accydata = new double[SAMPLES];
            acczdata = new double[SAMPLES];
            magxdata = new double[SAMPLES];
            magydata = new double[SAMPLES];
            magzdata = new double[SAMPLES];
            gyroxdata = new double[SAMPLES];
            gyroydata = new double[SAMPLES];
            gyrozdata = new double[SAMPLES];

  

            calMat = new double[3, 3];
            calMat[0, 0] = 1.0;
            calMat[1, 1] = 1.0;
            calMat[2, 2] = 1.0;


            for (i = 0; i < SAMPLES; i++)
            {
                 accydata[i]=0;
                 acczdata[i] = 0;
                 magxdata[i] = 0;
                 magydata[i] = 0;
                 magzdata[i] = 0;
                 gyroxdata[i] = 0;
                 gyroydata[i] = 0;
                 gyrozdata[i] = 0;
            }
        }

        int next_data_index;
        private AHRS sensor;

        private bool data_collection_enabled;
        

        const int SAMPLES = 5000;

        double[] accxdata; 

        double[] accydata; 
        double[] acczdata;
        double[] magxdata;
        double[] magydata;
        double[] magzdata;
        double[] gyroxdata;
        double[] gyroydata;
        double[] gyrozdata;

        double[,] calMat;
        GeneralMatrix D;

//        GeneralMatrix gyroData;

        /* **********************************************************************************
        * 
        * Function: void DataReceivedEventHandler
        * Inputs: None
        * Outputs: None
        * Return Value: None
        * Dependencies: None
        * Description: 
        * 
        * Handles DataReceived events generated by the AHRS object
        * 
        * *********************************************************************************/
        void DataReceivedEventHandler(int active_channels)
        {
            float percent_complete;

            if (data_collection_enabled)
            {

                int certo = 1;
                if(certo==1)
                {
                    gyroxdata[next_data_index] = sensor.gyroX;
                    gyroydata[next_data_index] = sensor.gyroY;
                    gyrozdata[next_data_index] = sensor.gyroZ;

                    accxdata[next_data_index] = sensor.accelX;
                    accydata[next_data_index] = sensor.accelY;
                    acczdata[next_data_index] = sensor.accelZ;

                    magxdata[next_data_index] = sensor.magX;
                    magydata[next_data_index] = sensor.magY;
                    magzdata[next_data_index] = sensor.magZ;


                    next_data_index++;

                    if (next_data_index == SAMPLES)
                    {
                        data_collection_enabled = false;

                        percent_complete = 100;
                        displayLoggingPercent(percent_complete);
                    }
                    else
                    {
                        // Update data collection bar
                        percent_complete = ((float)dataProgressBar.Maximum / (float)SAMPLES) * (float)next_data_index;

                        displayLoggingPercent(percent_complete);
                    }
                }
            }
            
        }

        private void displayLoggingPercent(float percent_complete)
        {
            if (this.calcVarStatusText.InvokeRequired)
            {
                displayLoggingPercentCallback d = new displayLoggingPercentCallback(displayLoggingPercent);
                this.Invoke(d, new object[] { percent_complete });
            }
            else
            {
                if (percent_complete == 100)
                {
                    dataProgressBar.Value = (int)percent_complete;
                    calcVarStatusText.Text = "Done.";
                    computecalcVarButton.Enabled = true;
                    startDataCollectionButton.Enabled = false;
                    stopDataCollectionButton.Enabled = false;
                }
                else
                {
                    dataProgressBar.Value = (int)percent_complete;
                    calcVarStatusText.Text = "Collecting Data: " + percent_complete.ToString() + " %";
                }
            }
        }


        private void startDataCollectionButton_Click(object sender, EventArgs e)
        {
            data_collection_enabled = true;
            startDataCollectionButton.Enabled = false;
            stopDataCollectionButton.Enabled = true;

            calcVarStatusText.Text = "Collecting Data";
        }

        private void stopDataCollectionButton_Click(object sender, EventArgs e)
        {
            data_collection_enabled = false;
            startDataCollectionButton.Enabled = true;
            stopDataCollectionButton.Enabled = false;

            calcVarStatusText.Text = "Inactive";
        }

        private void calcVarResetButton_Click(object sender, EventArgs e)
        {
            data_collection_enabled = false;
            startDataCollectionButton.Enabled = true;
            stopDataCollectionButton.Enabled = false;
            computecalcVarButton.Enabled = false;

            calStatusText.Text = "Inactive";
            dataProgressBar.Value = 0;
            next_data_index = 0;

            calcVarStatusText.Text = "Inactive";
        }

        private double getStandardDeviation(List<double> doubleList)
        {
            double average = doubleList.Average();
            double sumOfDerivation = 0;
            foreach (double value in doubleList)
            {
                sumOfDerivation += (value) * (value);
            }
            double sumOfDerivationAverage = sumOfDerivation / (doubleList.Count - 1);
            return Math.Sqrt(sumOfDerivationAverage - (average * average));
        }  

        private void computecalcVarButton_Click(object sender, EventArgs e)
        {
            int i,j;

            calStatusText.Text = "Computing variance...";
            List<double> gyroxdatalst = gyroxdata.OfType<double>().ToList();
            List<double> gyroydatalst = gyroydata.OfType<double>().ToList();
            List<double> gyrozdatalst = gyrozdata.OfType<double>().ToList();

            List<double> accxdatalst = accxdata.OfType<double>().ToList();
            List<double> accydatalst = accydata.OfType<double>().ToList();
            List<double> acczdatalst = acczdata.OfType<double>().ToList();

            List<double> magxdatalst = magxdata.OfType<double>().ToList();
            List<double> magydatalst = magydata.OfType<double>().ToList();
            List<double> magzdatalst = magzdata.OfType<double>().ToList();


            calMat[0, 0] = getStandardDeviation(accxdatalst);
            calMat[1, 0] = getStandardDeviation(accydatalst);
            calMat[2, 0] = getStandardDeviation(acczdatalst);
            calMat[0, 1] = getStandardDeviation(magxdatalst);
            calMat[1, 1] = getStandardDeviation(magydatalst);
            calMat[2, 1] = getStandardDeviation(magzdatalst);
            calMat[0, 2] = getStandardDeviation(gyroxdatalst);
            calMat[1, 2] = getStandardDeviation(gyroydatalst);
            calMat[2, 2] = getStandardDeviation(gyrozdatalst);

            VarAlignment00.Text = calMat[0, 0].ToString();
            VarAlignment01.Text = calMat[0, 1].ToString();
            VarAlignment02.Text = calMat[0, 2].ToString();

            VarAlignment10.Text = calMat[1, 0].ToString();
            VarAlignment11.Text = calMat[1, 1].ToString();
            VarAlignment12.Text = calMat[1, 2].ToString();

            VarAlignment20.Text = calMat[2, 0].ToString();
            VarAlignment21.Text = calMat[2, 1].ToString();
            VarAlignment22.Text = calMat[2, 2].ToString();

            calStatusText.Text = "Done";

        }
       

    }
}
